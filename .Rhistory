cd
ls
a <- c(1,2,3,4,5,6,7,8,9,10)
mean a
mean (a)
b=c(type, look, trent)
b=c(4,3,5,2,1)
# A variable can be a file name
myMean=function(x){
n=length(x)
total=sum(x)
average=total/n
return(average)
}
myMean(c(1,2,3,4,5,6,7,8,9))
# NA are a problem
myMean(x=c(1,2,3,NA))
myMean=function(x){
n=length(x,na.rm=TRUE)
total=sum(x, na.rm=TRUE)
average=total/n
return(average)
}
myMean(x=c(1,2,3,NA))
myMean=function(x){
n=length(x)
total=sum(x, na.rm=TRUE)
average=total/n
return(average)
}
myMean(x=c(1,2,3,NA))
?sort
myMin=function(x){
n=length(x)
sort(x, decreasing=FALSE)
head(x, n=(x/2))
}
myMin(x=c(1,2,3,4,5,6,7,8,9,10))
myMin=function(x){
n=length(x)
sort(x, decreasing=FALSE)
head(x, n=5
}
myMin=function(x){
n=length(x)
sort(x, decreasing=FALSE)
head(x, n=5)
}
myMin(x=c(1,2,3,4,5,6,7,8,9,10))
myMin=function(x){
n=length(x)
half.n=(n/2)
sort(x, decreasing=FALSE)
head(x, n=half.n)
}
myMin(x=c(1,2,3,4,5,6,7,8,9,10))
myMin(x=c(1,2,3,4,5,6,7,8,9,10,15,1,1,3,4))
myMin=function(x){
n=length(x)
half.n=(n/2)
sorted.x=sort(x, decreasing=TRUE)
head(sorted.x, n=half.n)
}
myMin(x=c(1,2,3,4,5,6,7,8,9,10,15,1,1,3,4))
myMin=function(x){
n=length(x)
half.n=(n/2)
sorted.x=sort(x, decreasing=FALSE)
head(sorted.x, n=half.n)
}
myMin(x=c(1,2,3,4,5,6,7,8,9,10,15,1,1,3,4))
myMin=function(x){
n=length(x)
half.n=(n/2)
sorted.x=sort(x, decreasing=FALSE)
not.it=head(sorted.x, n=half.n)
return(not.it)
}
myMin(x=c(1,2,3,4,5,6,7,8,9,10,15,1,1,3,4))
MinimumFunction=function(x){
Minimum=min(x)
HalfMin=Minimum/2
return(HalfMin)
}
MinimumFunction(x=c(1,2,3,4,5,6,7,8,9,10,15,1,1,3,4))
MinimumFunction=function(x,y){
Minimum=min(x)
HalfMin=Minimum/y
return(HalfMin)
}
MinimumFunction(x=c(1,2,3,4,5,6,7,8,9,10,15,1,1,3,4),y=5)
MinimumFunction=function(x,y){
# x is vector of numbers and y is the divider once we find the min
Minimum=min(x)
DividedMin=Minimum/y
return(HalfMin)
}
MinimumFunction(x=c(1,2,3,4,5,6,7,8,9,10,15,1,1,3,4),y=5)
MinimumFunction=function(x,y){
# x is vector of numbers and y is the divider once we find the min
Minimum=min(x)
DividedMin=Minimum/y
return(DividedMin)
}
MinimumFunction(x=c(1,2,3,4,5,6,7,8,9,10,15,1,1,3,4),y=5)
user_number=readline(prompt="Guess the number: ")
computer_number=sample(1:100)
if (user_number>computer_number){
print("lower")
}
else if (user_number<computer_number) {
print ("higher")
else {
print("Correct!")
}
user_number=readline(prompt="Guess the number: ")
computer_number=sample(1:100)
for (i in computer_number) {
if (user_number>computer_number[i]){
print("lower")
}
else if (user_number<computer_number[i]) {
print ("higher")
}
else {
print("Correct!")
}
}
user_number=readline(prompt="Guess the number: ")
for (i in user_number) {
computer_number=sample(1:100)
if (user_number>computer_number){
print("lower")
}
else if (user_number<computer_number[i]) {
print ("higher")
}
else {
print("Correct!")
}
}
user_number=readline(prompt="Guess the number: ")
for (i in user_number) {
computer_number=sample(1:100)
if ([i]>computer_number){
print("lower")
}
else if ([i]<computer_number[i]) {
print ("higher")
}
else {
print("Correct!")
}
}
user_number=readline(prompt="Guess the number: ")
computer_number=sample(1:100, size=1)
computer_number
1:100
size=1
ScoringTable=read.table("UWvMSU_1-22-13.txt", header=TRUE, sep="\t")
setwd ("/Users/alebron1/homework")
setwd ("/Users/andrea/Biocomputing2020_Tutorial10")
ScoringTable=read.table("UWvMSU_1-22-13.txt", header=TRUE, sep="\t")
setwd ("/Users/andrea/Biocomputing2020_Tutorial10")
ScoringTable=read.table("UWvMSU_1-22-13.txt", header=TRUE, sep="\t")
score_time_Table=data.frame(matrix(ncol=3, nrow=0))
x=c("time", "MSU", "UW")
colnames(score_time_Table)=x
MSU_score=0
UW_score=0
for (i in ScoringTable$time)) {
if (ScoringTable$team[i]=="UW"){
UW_score=UW_score+ScoringTable$score[i]
}
else {
MSU_score=MSU_score+ScoringTable$score[i]
}
time_score=data.frame(ScoringTable$time[i],MSU_score,UW_score)
score_time_Table=rbind(score_time_Table, time_score)
}
MSU_score=0
UW_score=0
for (i in ScoringTable$time)) {
if (ScoringTable$team[i]=="UW"){
UW_score=UW_score+ScoringTable$score[i]
}
else {
MSU_score=MSU_score+ScoringTable$score[i]
}
time_score=data.frame(ScoringTable$time[i],MSU_score,UW_score)
score_time_Table=rbind(score_time_Table, time_score)
}
for (i in ScoringTable$time) {
if (ScoringTable$team[i]=="UW"){
UW_score=UW_score+ScoringTable$score[i]
}
else {
MSU_score=MSU_score+ScoringTable$score[i]
}
time_score=data.frame(ScoringTable$time[i],MSU_score,UW_score)
score_time_Table=rbind(score_time_Table, time_score)
}
View(ScoringTable)
View(score_time_Table)
View(ScoringTable)
View(score_time_Table)
MSU_score
MSU_score=0
UW_score=0
for (i in ScoringTable$time) {
if (ScoringTable$team[i]=="UW"){
UW_score=UW_score+ScoringTable$score[i]
}
else {
MSU_score=MSU_score+ScoringTable$score[i]
}
exit
ok
